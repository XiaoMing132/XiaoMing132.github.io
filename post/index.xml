<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 永远相信美好的事情即将发生</title>
    <link>https://XiaoMing132.github.io/post/</link>
    <description>Recent content in Posts on 永远相信美好的事情即将发生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Oct 2022 18:35:41 +0800</lastBuildDate><atom:link href="https://XiaoMing132.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>linux关闭终端保持进程持续运行</title>
      <link>https://XiaoMing132.github.io/post/pro/</link>
      <pubDate>Thu, 06 Oct 2022 18:35:41 +0800</pubDate>
      
      <guid>https://XiaoMing132.github.io/post/pro/</guid>
      <description>##最近在服务器安装一个服务时，发现一旦把中端关了服务也就关了，后面查阅了一下资料解决了该问题，解决方法可以由好几种大家可以找到适合自己的解决方法 ###问题产生原因
如果直接关闭终端，终端会向当前环境启动的后台任务发送SIGHUP信号，让运行的程序挂起，那么忽略SIGHUP信号就行啦。
###解决方法 1:使用nohup命令，从名字就看出是否挂起运行命令，关闭终端或者退出某个账号，进程也继续保持运行状态，同样要配合【&amp;amp;】符号一起使用。 用法：nohup Command [ Arg … ] [&amp;amp;]
$ nohup sh test.sh &amp;amp; # 直接关闭当前终端，再打开一个查看 $ ps -few|grep test.sh 123 2:使用setsid命令可以使程序打开新的进程，该进程继承了父进程组的ID。从下图可以看到，test.sh脚本的父进程已经是init 1，此时不管关闭还是退出终端，已经和后台的程序没有关系了。
$ setsid sh test.sh 1 setsid与nohup的一个重要区别是：不需要使用&amp;amp;压入后台。 此法使运行的进程以root身份运行，多少有些安全隐患。 3:使用exit命令退出终端，我们的程序还是会继续运行，这是为什么呢？这是因为使用exit命令退出终端时不会向终端所属任务发SIGHUP信号，这是huponexit 配置项控制的，默认是off，可以使用shopt 命令查
[root@api ~]# shopt |grep huponexit huponexit off 12 将huponexit 配置成on，再次使用exit命令退出，所属的任务就会跟随退出。
[root@api ~]# shopt -s huponexit [root@api ~]# shopt |grep huponexit huponexit on 123 4:screen命令用于管理多个终端，它可以创建终端，让程序在里面运行。
screen sh test.sh &amp;amp; 1 </description>
    </item>
    
    <item>
      <title>C&#43;&#43;基本网络编程</title>
      <link>https://XiaoMing132.github.io/post/c&#43;&#43;_socket/</link>
      <pubDate>Thu, 29 Sep 2022 21:34:19 +0800</pubDate>
      
      <guid>https://XiaoMing132.github.io/post/c&#43;&#43;_socket/</guid>
      <description>#本教程主要讲述的是c++网络编程，需要一定的c++基础和计算机网络基础以及操作系统基础，话不多说，直接开始教程 ###首先还是来介绍一些名词
socket: 通道，运行在计算机的两个程序通过socket建立起一个通道,数据在通道中传输 socket的分类: socket提供了流(stream) 和 数据表(datagram)两种通信机制，stream采用tcp，datagram采用udp协议。至于这两种协议有什么区别就不介绍了，但凡学过计网的应该都懂吧 memset函数:给数组或结构图初始化函数，需包含头文件&amp;lt;cstring&amp;gt; memset(a,0,sizeiof(a)) 参数分别为指向数组的指针,初始化的值，大小 socket函数: 创建通道的函数，需包含头文件&amp;lt;sys/socket.h&amp;gt;，函数原型:int socket(int af, int type, int protocol); 参数:af 为地址族（Address Family），也就是 IP 地址类型，常用的有 AF_INET 和 AF_INET6。 type 为数据传输方式/套接字类型，常用的有 SOCK_STREAM（流格式套接字/面向连接的套接字） 和 SOCK_DGRAM（数据报套接字/无连接的套接字）protocol 表示传输协议，常用的有 IPPROTO_TCP 和 IPPTOTO_UDP，分别表示 TCP 传输协议和 UDP 传输协议。返回值为 0 1 -1，0和1都是有效的，0代表标准输入，1代表标准输出，-1代表创建失败 主机字节序和网络字节系:字节序是指占内存多于一个字节类型的数据在内存中的存放顺序，一个32位整数由4个字节组成。在内存中由两种存储方法:一种是将低字节序存储在起始地址，称为小端存储。另外一种则是将高字节序存储在起始地址，称为大端存储。列如 0x12345678 这个数据大端存储和小端存储分别为: 大端存储: 12 34 56 78 小端存储：78 56 34 12 网络字节序是TCP/IP中规定好的一种数据表示格式采用大端存储，主机字节序与网络字节序不同，它与cpu的设置有关，由的是大端存储，有的是小端存储。为了避免字节序不一样，我们在通信中统一采用网络字节序。 网络字节序和主机字节序的转换函数:htosn(),ntohs(),htonl(),ntohl()。htons和ntohs完成16位无符号数的相互转化，另外两个完成的是32位无符号数的转换
####1:接下来是服务端的工作流程: 1.创建服务端的socket。 2.把服务端用于通信的地址和端口绑定到socket上。 3.把socket设置为监听模式。 4.接受客户端的连接。 5.与客户端通信，接收客户端发过来的报文后，回复处理结果。 6.不断的重复第5步，直到客户端断开连接。 7.关闭socket，释放资源。 #####服务端代码展示server.cpp
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.</description>
    </item>
    
    <item>
      <title>Markdown的基本语法使用</title>
      <link>https://XiaoMing132.github.io/post/markdown/</link>
      <pubDate>Wed, 28 Sep 2022 22:38:14 +0800</pubDate>
      
      <guid>https://XiaoMing132.github.io/post/markdown/</guid>
      <description>#一级标题 ##二级标题 ###三级标题
#一级标题 ##二级标题 ###三级标题 #引用一段话 &amp;gt; 所引用的话 #使用C语言代码块
int main(void){ cout&amp;lt;&amp;lt;hello word; return 0; } ```c
你的代码
``` #换行
按两个或多个空格再按回车键 #Markdown转义字符 \ ###加粗和倾斜 使用一个表示倾斜，两个表示加粗 *倾斜* **加粗**</description>
    </item>
    
    <item>
      <title>linux Firewall-cmd的使用</title>
      <link>https://XiaoMing132.github.io/post/firewall/</link>
      <pubDate>Sun, 25 Sep 2022 00:39:52 +0800</pubDate>
      
      <guid>https://XiaoMing132.github.io/post/firewall/</guid>
      <description>##最近看firewall-cmd的man文档感觉不好记，就把常见的几个firewall命令记在了博客上。下面几个命令Firewall已经能满足大部分需求了 ###1:查看防火墙规则 firewall-cmd &amp;ndash;list-all
###2:重新加载防火墙 firewall-cmd &amp;ndash;reload
###3:永久放行80端口 firewall-cmd &amp;ndash;add-port=80 &amp;ndash;permanent
###4:firewall临时放行http服务 firewall-cmd &amp;ndash;add-service=http
###5:firewall永久只允许173.1.3.12连接ssh firewall-cmd &amp;ndash;add-rich-rule &amp;lsquo;rule family=&amp;ldquo;ipv4&amp;rdquo; source address=&amp;ldquo;173.1.3.12/32&amp;rdquo; port port=&amp;ldquo;22&amp;rdquo; protocol=&amp;ldquo;tcp&amp;rdquo; accept&amp;rsquo; &amp;ndash;permanent
###上面要放行的端口或参数自己替换掉就行了</description>
    </item>
    
    <item>
      <title>ngix设置反向代理和负载均衡</title>
      <link>https://XiaoMing132.github.io/post/a/</link>
      <pubDate>Sat, 10 Sep 2022 02:42:45 +0800</pubDate>
      
      <guid>https://XiaoMing132.github.io/post/a/</guid>
      <description>Nginx作为一款轻量级的web服务器，很受大家欢迎，今天为大家简单简单介绍一下ngix如何设置反向代理和负载均衡 其实Nginx设置反向代理非常简单，只需要在找到配置文件在配置文件的http模块中加入一下几行代码就Ok了 upstream albert{ #albert为负载均衡名字可以任取 server 43.143.78.123:80 weight=1; #负载均衡的服务,weight为权重 server www.baidu.com weight=1; } server{ listen 81;　#服务监听端口 server_name localhost;　#服务名字 location / { #访问该端口根目录下会被执行一下代码 proxy_pass http://albert;　#反向代理到负载均衡，这里也可以直接写访问路径或代理主机 } }
注意：若复制以上代码到server请把注释删掉以免出现问题，修改配置文件都要记得加分号</description>
    </item>
    
    <item>
      <title>Frp自建内网穿透</title>
      <link>https://XiaoMing132.github.io/post/frp/</link>
      <pubDate>Fri, 09 Sep 2022 20:09:24 +0800</pubDate>
      
      <guid>https://XiaoMing132.github.io/post/frp/</guid>
      <description>ffrp是一个内网穿透的软件，可以自己配置相对于其他的穿透软件更为强大，客户端和服务端均需要安装frp，该教程需要一台linux服务器
注意:若复制该教程上的代码到服务器，请删除代码之后的#号的注释信息，因为服务器可能会无法识别，最好客户端上的注释也一并删掉 1:首先从github上下载frp软件 https://github.com/fatedier/frp/releases
2:下载玩下来后后解压可以得到好几个文件，以c结尾的为客户端的，以s结尾的为服务端的，保留对应的就是了，其他的可以删掉 3:配置服务端,使用vim frpc.ini查看frpc.ini配置文件 [common] bind_port = 7000 ~ 表示frp绑定本机7000端口，可自行修改，注意：防火墙需要放行绑定的端口
3:在后台启动frp服务端 ./frps -c frpc.ini &amp;amp;
4:在客户端修改客户端配置文件frpc.ini：在客户端使用vim frpc.ini [common] server_addr = 服务器地址 server_port = 服务器端口 ~
5:客户端开启frp连接服务器 ./frpc -c frpc.ini
6:此时客户端已经与服务端连接成功了，接下来我们配置下仪表盘，当然这个不是必须的，你们可以忽略这部配置。配置也很简单，分别在服务端frps.ini和客户端frpc.ini配置文件下添加如下 [common] bind_port = 7000 dashboard_port = 7500 #服务端仪表面板的端口 dashboard_user = admin #仪表盘登录名 dashboard_pwd = admin #仪表盘登录密码
7:接下来使用仪表盘端口进行访问了 http://你的IP地址:仪表盘端口 提示:不使用仪表盘的话可以忽略 6 7 步
8:修改客户端frpc.ini给客户端配置一个tcp通道穿透到ssh服务 [common] server_addr = 服务器地址 server_port = 服务器端口
[ssh] #通道名字 type = tcp local_ip = 127.</description>
    </item>
    
    <item>
      <title>Atufa</title>
      <link>https://XiaoMing132.github.io/post/atufa/</link>
      <pubDate>Fri, 09 Sep 2022 12:00:22 +0800</pubDate>
      
      <guid>https://XiaoMing132.github.io/post/atufa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用 hugo &#43; github 搭建一个个人的博客</title>
      <link>https://XiaoMing132.github.io/post/albert/</link>
      <pubDate>Fri, 09 Sep 2022 11:31:53 +0800</pubDate>
      
      <guid>https://XiaoMing132.github.io/post/albert/</guid>
      <description>hugo + github 搭建个人博客还算比较简单，步骤呢百度几乎也可以查到，接下来以我的经验带大家搭建一个静态的个人博客
1:首先访问hugo下载对应的包进行安装 https://github.com/gohugoio/hugo/releases
2:本人用的是ubuntu系统下载的是deb的包，下载完成后找到对应的文件使用dpkg命令安装hugo dpkg &amp;ndash;install hugo_0.102.3_Linux-64bit.deb
3:安装完成创建一个自己的博客目录 hugo new site MyBlog
4:创建完后因为我们是没有主题的，也就是没有模板的，所以说要从网上下载一个主题，访问一下网站下载主题 https://themes.gohugo.io/
5:我这里下的是一个m10c的主题，下载完后需要将主题放到MyBlog/theme/下,主题配置好后使用命令创建一个内容，注意hugo使用的是md文档 hugo new post/test.md
6:创建完后可以编辑test.md写自己文档，接下来可以开启本地服务查看预览了,注意要在MyBlog下执行命令 hugo server -t mytheme &amp;ndash;buildDrafts
7:接下来我们要将本地的博客部署到github上，首先要在github上创建一个自己的仓库，仓库名称必须为 你的名称.github.io 否则后面会出错 8:接下来我们首先要使用hugo命令创建一个本地仓库，同样也要在MyBlog目录下 hugo &amp;ndash;theme=mytheme &amp;ndash;baseUrl=&amp;ldquo;你的仓库地址&amp;rdquo; &amp;ndash;buildDrafts
9:执行上条命令后会在MyBlog目录下会生成一个public文件，这个就是一个本地的仓库，现在我们使用git命令绑定远程仓库以便以后push上去 git remote add origin &amp;ldquo;你的仓库地址&amp;rdquo;
10:接下来切换到public目录就可以push到github上了,提交时要输入github用户名和密码 cd public/ &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;ldquo;commit&amp;rdquo; &amp;amp;&amp;amp; git push -u origin master
11:现在完成了访问你的仓库地址就可以查看了 https://仓库名
12:如果后续要增加内容上去到github重复5 8 10步骤</description>
    </item>
    
  </channel>
</rss>
